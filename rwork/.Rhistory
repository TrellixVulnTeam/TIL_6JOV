num[c(2,5,10,27)]
prime<-c(2,3,5,7,11,13)
idx<-c(1,3,5)
prime[idx]
prime[-3]
prine[-2:-4]
prime[2:4]
prime[-(2:4)]
prime<-c(2,3,5,7,11,13)
length(prime)
)
pr
prime[1:length(prime)]
prime[1:(length(prime)-2)]
prime[-length(prime)]
prime[2]<-30
prime[c(3,4)]<-c(30,40)
prime
prime
#1~10
c(1:10)
#10~1
c(10:1)
#1~10~1
c(1:10)
#1~10~1
c(1:10,c(10,1))
#1~10~1
c(1:10,c(10:1))
#1~10~1
c(1:10,c(9:1))
signif(pi,digit=3)
round(pi,digit=3)
round(pi,digit=2)
round(pi,digit=3)
round(pi,digit=2)
signif(pi,digit=3)
round(pi,digit=2)
10%/%3
(weight/height)^2
weight<-c(75, 70, 60, 100, 65)
height<-c(75, 70, 60, 100, 65)
(weight/height)^2
height<-c(180, 160, 165, 185, 155)
(weight/height)^2
weight/(height^2)
weight/height^2
(weight//height)^2
(weight%%height)^2
10%%3
10%/%3
(weight%/%height)^2
weight<-c(75, 70, 60, 100, 65)
height<-c(180, 160, 165, 185, 155)
(weight%/%height)^2
bmi<-w/(h/100)^2
w[bmi>25]
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
n<-1:100
sum(num&&7==0)
sum(n&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
n<-1:100
sum(n&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
num<-1:100
sum(num&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
num<-c(1:100)
sum(num&&7==0)
sum(num%%7==0)
y<-c(1:10)
(y-mean(y)/sd(y))
#finance.yahoo.com->samsung
df<-read.csv("samsung.csv",header=TRUE,sep=",")
df
df2<-read.csv("samsung.csv")  #,header=TRUE,sep="," 디폴트
df2
read.csv('samsung.csv',header=FALSE,sep=',')
# 1. Happy, Birthday, to, you로 구성된 텍스트 벡터 생성하시오
# -벡터의 길이
# -문자 개수의 합
x<-c('Happy', 'Birthday', 'to, you')
length(x)
# 1. Happy, Birthday, to, you로 구성된 텍스트 벡터 생성하시오
# -벡터의 길이
# -문자 개수의 합
x<-c('Happy', 'Birthday', 'to', 'you')
length(x)
x<-'We have a dream'
#nchar함수(텍스트 안에 문자의 개수 , 공백문자도 하나의 문자로 취급)
nchar(x)
length(x) #문자 벡터의 벡터 길이(문자열자체를 하나로 봄(원소 개수 1개))
length(c('we','have','a','dream'))  #백터 길이4
y<-c('we','have','a','dream')
length(y[4])
nchar(y[4])
nchar(y)
# -문자 개수의 합
nchar[x]
# -문자 개수의 합
nchar(x)
nchar(y)
x<-c('Happy', 'Birthday', 'to', 'you')
# -벡터의 길이
length(x)
# -문자 개수의 합
nchar(x)
# -문자 개수의 합
sum(nchar(x))
# 2. 1번 문제 벡터를 모두 연결하시오("Happy Birthday to you")
paste(c,collapse = " ")
# 2. 1번 문제 벡터를 모두 연결하시오("Happy Birthday to you")
paste(x,collapse = " ")
# 2. 1번 문제 벡터를 모두 연결하시오("Happy Birthday to you")
text<-paste(x,collapse = " ")
# - 텍스트 벡터의 길이
length(text)
# - 텍스트 벡터의 길이
nchar(text)
# 3. paste함수와 LETTERS 상수 벡터를 이용하여 다음 문자 벡터 생성하시오
# - "A 1" "B 2" "C 3" "D 4" "E 5"
# -"A1" "B2" "C3" "D4" "E5"
al<-c('A','B','C','D','E')
nu<-c(1,2,3,4,5)
paste(al,nu)
# 3. paste함수와 LETTERS 상수 벡터를 이용하여 다음 문자 벡터 생성하시오
# - "A 1" "B 2" "C 3" "D 4" "E 5"
# -"A1" "B2" "C3" "D4" "E5"
al<-c('A','B','C','D','E')
paste(al,LETTERS)
paste(1:5,LETTERS)
paste(LETTERS,1:5)
paste(LETTERS[1:5],1:5)
paste(LETTERS[1:5],1:5,sep = '')
# 4. 단어 단위로 분할하고, 모든 쉼표와 하이픈은 제거하시오.
x<-c("Yesterday is history,", "That's, why we call it the present - from Kung")
strsplit(x,split="")
# 4. 단어 단위로 분할하고, 모든 쉼표와 하이픈은 제거하시오.
x<-c("Yesterday is history,", "That's, why we call it the present - from Kung")
strsplit(x,split="")
strsplit(x,split=",")
strsplit(x,split=" ")
x<-gsub(pattern = ',',replacement = '',txt)
x<-gsub(pattern = ',',replacement = '',x)
x<-gsub(pattern = '-',replacement = '',txt)
x
x<-gsub(pattern = '-',replacement = '',t)
x
x<-gsub(pattern = '-',replacement = '',x)
x
ltxt<-strsplit(txt,' ')
ltxt
ltxt<-strsplit(x,' ')
ltxt
ltxt[[2]]
ltxt[[2]]
ltxt[[1]]
ltxt[[2]]
# 5. 주민번호 뒤 일곱 자리 수를 *로 모두 대체하시오(?)
# "110101-1234123" "950102-2121212"
id<-c("110101-1234123" "950102-2121212")
# 5. 주민번호 뒤 일곱 자리 수를 *로 모두 대체하시오(?)
# "110101-1234123" "950102-2121212"
id<-c("110101-1234123","950102-2121212")
idnum
id
pat<-substr(id,nchar(id)-6,nchar(id))
pat
gsub(pattern = pat[1],replacement = '*******',id)
gsub(pattern = pat[2],replacement = '*******',id)
id<-matrix(c("110101-1234123","950102-2121212"))
id
num<-paste(1:12)
num
month.abb
paste(month.abb,num,sep = "_")
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
names(df)
str(df)
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
df[name(df)]
df[name(df)[2]]
df[names(df)[2]]
names(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1])
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[,-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[,-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
df[names(df)[7]]
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
names(df)
laf<-rbind(df[2:249,3:4],0)
laf<-rbind(df[2:249,3:4])
lag<-rbind(df[2:249,3:4])
lag
df<-df[,3:4]
lag
df
lag<-rbind(df[2:249,3:4],)
df<-df[,3:4]
lag<-rbind(df[2:249,3:4],0)
lag<-rbind(df[2:249,3:4],0)
lag
df
lag<-rbind(df[2:249,3:4])
head(df)
head(lag)
head(df)
head(lag)
df
head(df)
head(df)
head(lag)
fall<-lag-df
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-lag-df
max(x[1:nrow(samsung)-1]-x[2:nrow(samsung)])})
apply(samsung[,3:4], 2, function(x){max(x[1:nrow(samsung)-1]-x[2:nrow(samsung)])})
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
apply(df[3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
lag<-rbind(df[2:249,3:4],0)
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-lag-df
apply(fall,2,max)
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-lag-df
apply(fall,2,max)
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-df-lag
apply(fall,2,max)
fall<-lag-df
apply(fall,2,max)
read.csv("product.csv")
read.csv("product-with-no-header.csv",header=FALSE)
p<-read.csv("product.csv",stringsAsFactors = TRUE)
str(p)
p<-read.csv("product.csv",as.is=TRUE)  #as.is=TRUE는 stringAsFactors=FALSE와 같음
#readtable은 다양한 구성의 자료를 읽을 수 있고 readcsv는 ,로 구분된 자료를 읽음
p<-read.table("product.txt")
p
#readtable은 다양한 구성의 자료를 읽을 수 있고 readcsv는 ,로 구분된 자료를 읽음
#read.table은 첫번째부터 데이터로 봄(헤더 설장 따로 해주어야함)
p<-read.table("product.txt",header=TRUE)
p
str(p)
#readtable은 다양한 구성의 자료를 읽을 수 있고 readcsv는 ,로 구분된 자료를 읽음
#read.table은 첫번째부터 데이터로 봄(헤더 설장 따로 해주어야함)
p<-read.table("product.txt",header=TRUE,stringsAsFactors = TRUE)
p
str(p)
#readtable은 다양한 구성의 자료를 읽을 수 있고 readcsv는 ,로 구분된 자료를 읽음
#read.table은 첫번째부터 데이터로 봄(헤더 설장 따로 해주어야함)
p<-read.table("product.txt",header=TRUE)
p
str(p)
read.table("product-colon.txt")
read.table("product-colon.txt",header=TRUE)
read.table("product-colon.txt",sep=":",header=TRUE)
read.table("product-missing.txt")
read.table("product-missing.txt",header=TRUE)
read.table("product-missing.txt",header=TRUE,na.strings = ".")
#NA:데이터 누락(결측값)
read.table("product-missing.txt",header=TRUE,na.strings = "누락")
#NA:데이터 누락(결측값)
read.table("product-missing.txt",header=TRUE,na.strings = "누락|몰라")
#NA:데이터 누락(결측값)
read.table("product-missing.txt",header=TRUE,na.strings =c('누락','몰라'))
#NA:데이터 누락(결측값)
read.table("product-missing.txt",header=TRUE,na.strings =c('누락','몰라'))
read.table("product-comment.txt",header=TRUE)
read.csv("brand-eval.csv",header=TRUE)
read.table("brand-eval.csv",header=TRUE)
read.table("brand-eval.csv",header=TRUE,sep=",")
read.table("brand-eval.csv",header=TRUE,sep=",",row.names = "id")
brand.eval<-read.table("brand-eval.csv",header=TRUE,sep=",",row.names = "id")
str(brand.eval)
brand.eval<-read.table("brand-eval.csv",header=TRUE,sep=",",row.names = "id")
str(brand.eval)
brand.eval
brand.eval<-read.table("brand-eval.csv",header=TRUE,sep=",",row.names = "id",
colClasses = c('character','character','numeric','numeric','numeric'))
brand.eval
library(readr)
product <- read_csv("product.csv")
View(product)
#엑셀 데이터 읽기
install.packages("openxlsx")
library(openxlsx)
read.xlsx("product.xlsx",sheet=1)
read.xlsx("product.xlsx",sheet=1)
read.xlsx("product.csv",sheet=1)
url<-"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris.uci<-read.csv(url,header=FALSE)
iris.uci
download.file(url=url,destfile = "myIris.csv")
url<-"http://seanlahman.com/files/database/baseballdatabank-master_2016-03-02.zip"
local.copy<-"baseball.zip"
download.file(url,local.copy)
unzip(zipfile = local.copy,"baseballdatabank-master/core/salaries.csv")
unzip(zipfile = local.copy,"baseballdatabank-master/core/Salaries.csv")
head(bs)
bs<-unzip(zipfile = local.copy,"baseballdatabank-master/core/Salaries.csv")
head(bs)
bs<-unzip(zipfile = local.copy,"baseballdatabank-master/core/Salaries.csv")
head(bs)
bs<-read.csv(unzip(zipfile = local.copy,"baseballdatabank-master/core/Salaries.csv"))
head(bs)
install.packages("ggplot2")
library(ggplot2)
mpg
mpg$displ
midwest
as.data.frame(midwest)
midwest<-as.data.frame(midwest)  #tibble->dataframe
install.packages("dplyr")
library(dplyr)
#rename(데이터프레임, 변경후컬럼이름=변경전 컬럼 이름)
midwest
rename(midwest, cg=category)
# 1. 시험 점수 변수 만들고 출력하기
# 다섯 명의 학생이 시험을 봤습니다. 학생 다섯 명의 시험 점수를 담고 있는 변수를 만들어 출력해 보세요. 각
# 학생의 시험 점수는 다음과 같습니다.
score<-c(80, 60, 70, 50, 90)
score
# 2. 전체 평균 구하기
# 앞 문제에서 만든 변수를 이용해서 이 학생들의 전체 평균 점수를 구해보세요.
mean(score)
# 3. 전체 평균 변수 만들고 출력하기
# 전체 평균 점수를 담고 있는 새 변수를 만들어 출력해 보세요. 앞 문제를 풀 때 사용한 코드를 응용하면
# 됩니다.
avg<-mean(score)
avg
v1<-c(20,10,50,40,20)
v2<-c(300,200,100,700,600)
v3<-c('a','b','b','a','b')
df<-data.frame(v1,v2,v3)
df
#두 개 이상의 열을 추가하는 경우에는 데이터프레임으로 생성한 다음 수행
new.cols<-data.frame(menu=c('aa','bb','aa','cc','aa','bb'),
quantity=c(10,20,30,20,10,25)
)
new.cols
data.frame(제품=c('사과','딸기','수박'),
가격=c(1800,1500,3000),
판매량=c(24,38,13)
)
id<-c('a1','a2','a3')
price<-c(10,20,30)
name<-c('x','y','z')
product<-data.frame(id,name,price)
product
str(product)
#제거
product<-product[-4,]
product
product<-rbind(product,c('a4','k',40))
data.frame(제품=c('사과','딸기','수박'),
가격=c(1800,1500,3000),
판매량=c(24,38,13)
)
df<-data.frame(제품=c('사과','딸기','수박'),
가격=c(1800,1500,3000),
판매량=c(24,38,13)
)
# 5. 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구해보세요
mean(df$가격)
mean(df$판매량)
#or
apply(df[,-1],2,FUN=mean)
