#숫자와 문자가 섞여 있으면, 숫자->숫자벡터로, 문자->문자벡터로 변환됨
list(odd=c(1,3,5),even=c(2,4,6))
#as.data.frame():리스트->데이터프레임으로 변환
#숫자와 문자가 섞여 있으면, 숫자->숫자벡터로, 문자->문자벡터로 변환됨
lst<-list(odd=c(1,3,5),even=c(2,4,6))
as.data.frame(lst)
lstdf<-as.data.frame(lst)
str(lstdf)
lst<-list(odd=c(1,3,5),even=c('two','four','six'))
lst2<-list(odd=c(1,3,5),even=c('two','four','six'))
lstdf2<-as.data.frame(lst2)
str(lstdf2)
df1<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df1
df[1,]
df1[1,]
str(df1[1,])
df1[,1]
str(
df1[,1])
str(df1[,1])
df1[1]
str(df1[1])
df1[[1]]
df2<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df2
as.vector(df2)
#1)데이터프레임->행렬
as.matrix(df2)
#2)행렬->as.vector
as.vector(as.matrix(df2))
df3<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
df3
as.matrix(df3)
as.vector(as.matrix(df3))
df4<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df4
as.list(df4)
str(df4)
str(as.list(df4))
df5<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
as.list(df5)
str(as.list(df5))
as.matrix(df5)
df5<-data.frame(odd=c(1,3,5),even=c(2,4,6))
as.matrix(df5)
df6<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
as.matrix(df56
df6<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
as.matrix(df6)
month.name
print(i)
i=month.name
for(i in seq(from=1,to=12,by=1))
print(i)
i=month.name(i)
i=month.name
i
for(i in seq(from=i[1],to=i[12],by=1))
print(i)
i[1]
for(i in seq(from=i[1],to=i[12]))
print(i)
i=month.name
for(i in seq(from=i[1],to=i[12]))
print(i)
i=month.name
for(i in seq(from=i[1],to=i[12]))
print(i)
for(i in seq(from=i[1],to=i[12]))
for(i in seq(from=i[1],to=i[12])) print('The month of'+i)
# 2. 짝수이면 TRUE, 홀수이면 FALSE를 출력하는 함수 작성.
# 다음 벡터로 테스트하시오.
# c(-5:5)
evenCheck<-function(x){
if(x%%2==0){
return('TRUE')
}
return('FALSE')
}
y<-c(-5:5)
evenCheck(y)
for(i in month)print(paste('The month of',i))
# 1. for문으로 다음과 같이 월 이름을 출력
# The month of January
# ...
# The month of December
month
# 1. for문으로 다음과 같이 월 이름을 출력
# The month of January
# ...
# The month of December
month
for(i in month)print(paste('The month of',i))
# 1. for문으로 다음과 같이 월 이름을 출력
# The month of January
# ...
# The month of December
for(i in 1:12)
# 1. for문으로 다음과 같이 월 이름을 출력
# The month of January
# ...
# The month of December
for(i in 1:12)print(paste('The month of',month.name[i]))
oddEven<-function(x){
ifelse(x%%2==0,TRUE,FALSE)
}
oddEven(c(-5:5))
# 3. 짝수 개수를 세는 함수 작성.
# 다음 벡터로 테스트하시오.
# c(-5:5)
evens<-function(x){
sum(x%%2==0)
}
evens(-5:5)
# 3. 짝수 개수를 세는 함수 작성.
# 다음 벡터로 테스트하시오.
# c(-5:5)
evens<-function(x){
sum(x%%2==0)
}
evens(-5:5)
# 4. 주어진 숫자가 원주율보다 크면 TRUE, 아니면 FALSE를 출력하는 함수 작성.
# 3과 1:5 벡터에 대해 테스트하시오
comPi<-function(x){
ifelse(x>pi,TRUE,FALSE)
}
comPi(3)
comPi(1:5)
english=c(90,80,60,70)
math=c(50,60,100,20)
class=c(1,1,2,2)
df_midterm<-data.frame(english,math,class)
df_midterm
colMeans(df_midterm[-3])
colMeans(df_midterm[-3])
rowMeans(df_midterm[-3])
# 6. 2~99까지 수에 대해
# - 3의 배수에 해당하는 수의 합계를 구하시오.
sum(c(2:99)[which(2:99%%3==0)])
# 6. 2~99까지 수에 대해
# - 3의 배수에 해당하는 수의 합계를 구하시오.
which(2:99%%3==0)
# - 3의 배수에 해당하는 수의 개수를 구하시오.
sum(2:99%%3==0)
2:99%%3==0
length(which(2:99%%3==0))
factorial1(5)
# 7. 임의의 수 n을 전달받아, n!을 출력하는 함수를 완성하시오. (n>=2, 5!=5*4*3*2*1)
factorial1<-function(n){
a=1
for(i in 1:n) a=a*i
print(a)
}
factorial1(5)
factorial1(3)
factorial1(4)
#
# 8. 반복문을 이용하여 구구단을 출력하시오
for(dan in 2:9) for(n in 1:9) print(paste(dan,'x',n,'=',dan*n)
#
# 8. 반복문을 이용하여 구구단을 출력하시오
for(dan in 2:9) for(n in 1:9) print(paste(dan,'x',n,'=',dan*n))
#
# 8. 반복문을 이용하여 구구단을 출력하시오
for(dan in 2:9) for(n in 1:9) print(paste(dan,'x',n,'=',dan*n))
# 9. 반복문을 활용하여 출력하시오
#     *
#    ***
#   *****
#   *******
for(i in 1:4) print(paste(rep(c(' ','*'),c(4-1,(i*2)-1)),collapse = ''))
# 9. 반복문을 활용하여 출력하시오
#     *
#    ***
#   *****
#   *******
for(i in 1:4) print(paste(rep(c(' ','*'),c(4-i,(i*2)-1)),collapse =''))
# 9. 반복문을 활용하여 출력하시오
#     *
#    ***
#   *****
#   *******
for(i in 1:4) print(paste(rep(c(' ', '*'), c(4-i, (i*2)-1)), collapse=''))
# 9. 반복문을 활용하여 출력하시오
#     *
#    ***
#   *****
#   *******
for(i in 1:4) print(paste(rep(c(' ', '*'), c(4-i, (i*2)-1))))
# 9. 반복문을 활용하여 출력하시오
#     *
#    ***
#   *****
#   *******
for(i in 1:4) print(paste(rep(c(' ', '*'), c(4-i, (i*2)-1)),collapse=''))
#   10.  타이타닉 데이터 전처리
# - train.csv 파일 읽을 때 "" 는 na로 처리하시오.
titanichw<-read.csv('train.csv',na.strings = "")
titanichw
# - Surived 컬럼의 타입을 확인하시오.
str(titanichw)
class(titanichw$Survived)
mode(titanichw$Survived)
typeof(titanichw$Survived)
is.factor(titanichw$Survived)
# - Surived 컬럼의 타입을 확인하시오.
str(titanichw)
class(titanichw$Survived)
mode(titanichw$Survived)
typeof(titanichw$Survived)
titanichw$Survived<-factor(titanichw$Survived)
is.factor(titanichw$Survived)
#source함수:day7에서 translength.R을 실행하고자 함
source('translength.R')
#source함수:day7에서 translength.R을 실행하고자 함
source('translength.R')
transLength(10)
y<-c(100,150,200)
transLength(y)
trans2<-transLength
trans2(y)
f1<-function(x,y){x+y}
f1(1,3)
#함수에서 실행할 문장이 1개인 경우네는 중괄호 생략이 가능
f2<-function(x,y) x+y
f2(2,5)
tran3<-function(x){
if(!is.numeric(x)){
return('not a number')
}   #!는 not 연산자
tlength<-round(x*0.9144,1)
result<-paste(tlength,'m',sep='')
return(result)
}
#tran3(10)
tran3('abc')
is.numeric('3')
#퀴즈
#피트(feet),인치(inch) 변환이 가능한 함수
#1야드=3피트, 1야드 =36인치
y<-c(100,150,200)
transLength<-function(x,mult=0.9144,unit="m"){
tlength<-round(x*mult,digits=1)
result<-paste(tlength,unit,sep='')
return(result)
}
y<-c(100,150,200)
transLength(y,mult=3,unit='ft')
transLength(y,mult=36,unit='in')
transLength(y)
transLength(x=y,mult=3,unit="ft")
transLength(x,3,"ft")
transLength(x=y,mult=3,unit="ft")
transLength(x,3,"ft")
#
transLength<-function(x,mult=0.9144,unit="m",d=1){
tlength<-round(x*mult,digits=d)
paste(tlength,unit,sep='')
}
y<-c(100,150,200)
#함수 자체를 인수처럼 취급할 수 있음
transLength<-function(x,mult=0.9144,unit="m",FUN=round,...){
tlength<-FUN(x*mult,...)
paste(tlength,unit,sep='')
}
y<-c(100,150,200)
transLength(y)
#floor->원데이터의 가까운 정수로 출력
transLength(y,FUN=floor)
transLength(y,FUN=signif, digits=3)
x<-pi
y<-3
if(x>y)x
if(x>y){
print(x)
}
if(x<y)x else y
#조건문에 백터가 들어갈 수 없음(여러개 있다면 첫번째 원소만 취급됨)
x<-pi
y<-1:5
if(x<y)x else y
#ifelse함수는 벡터연산이 가능
x<-pi
y<-1:5
ifelse(x>y,x,y)
#or
titanic <- read.table('day7_train.csv', sep=',', header=T, na.strings=c('', ' '))
#or
titanic <- read.table('day7_train.csv', sep=',', header=T, na.strings=c('', ' '))
#or
titanic <- read.table('train.csv', sep=',', header=T, na.strings=c('', ' '))
titanic
x<-c(2,3,5,7,11,13,17)
center(x,'mean')
center(x,'median')
center(x,'trimmed')  #절삭평균
x<-c(2,3,5,7,11,13,17)
center(x,'mean')
center(x,'median')
x<-c(2,3,5,7,11,13,17)
center(x,'mean')
center(x,'median')
center<-function(x,type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x,trim=0.1)  #10% 절삭평균
)
"choose one of mean, median, and trimmed"
}
x<-c(2,3,5,7,11,13,17)
center(x,'mean')
center(x,'median')
center(x,'trimmed')  #절삭평균
center<-function(x,type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x,trim=0.1)  #10% 절삭평균
"choose one of mean, median, and trimmed"
)
}
x<-c(2,3,5,7,11,13,17)
center(x,'mean')
center(x,'median')
center(x,'trimmed')  #절삭평균
center<-function(x,type){
switch(type,
mean=mean(x),
median=median(x),
trimmed=mean(x,trim=0.1),  #10% 절삭평균
"choose one of mean, median, and trimmed"
)
}
x<-c(2,3,5,7,11,13,17)
center(x,'mean')
center(x,'median')
center(x,'trimmed')  #절삭평균
center(x,'other')
#
i<-5
#
i<-5
repeat{if(i>25)break
else{
print(i)
i<-i+5
}
}
i<-5
while(i<=25){
print(i)
i<-i+5
}
for(i in seq(from=5,to=25,by=5))
print(i)
#반복문 작성시 참고사항
#1)실행 결과는 루프 안에서는 출력되지 않는다->명시적으로
#print함수를 호출해야만 출력이 됨
#for(i in seq(from=5,to=25,by=5)) i
for(i in seq(from=5,to=25,by=5)) print(i)
#2) for문이 종료된 이후에도 변수는 사라지지 않는다
i<-1
for(i in seq(from=5, to=25,by=5)) i
print(i) #가장 마지막에 i에 할당된 25가 저장되어 있음
#mode:데이터 유형(숫자, 문자, 논리, 리스트, 함수)...
mode(3.14)
mode(c(3.14,1.5))
mode('Batman')
mode(c('Batman','Superman','Somun'))
mode(factor('High','Med','Low'))
mode(factor('High','Med','Low'))
mode('2021-03-02')
mode(as.Date('2021-03-02'))
mode(5>2)
mode(list(1.2,'apple',c(3,4)))
mode(mean)
d<-as.Date('2021-03-02')
d+1
as.integer(d)  #단위:일, 1970.1.1일을 기준으로 현재까지 경과한 날
length(d)
#타입을 바꾸고 싶을 때 as.-
as.numeric(1.618)
as.integer(1.618)
as.character(1.618)
#타입을 바꾸고 싶을 때 as.-
as.numeric(1.618)
as.integer(1.618)
as.character(1.618)
as.numeric('test')  #변환이 불가능한 경우에는 NA가 출력
mode(as.numeric('1.234'))
as.numeric(c('-1','1.5','3.14'))
as.numeric(c('-1','1.5','3.14','test'))
mode(10:20)
as.numeric(as.character(10:20))
as.numeric(TRUE)
as.numeric(FALSE)
sum(c(TRUE,FALSE,TRUE))
#c(1,3,5,7,9) #벡터에서 4보다 큰 수는 총 몇개인가?
#중요!!!!!!
c(1,3,5,7,9)>4
sum(c(1,3,5,7,9)>4)
as.data.frame(x)
as.list(x)
as.data.frame(x)
#데이터 타입 확인할 때
is.data.frame(x)
is.factor(x)
as.data.frame(x)
as.list(x)
#데이터 타입 확인할 때
is.data.frame(x)
is.factor(x)
is.vector(x)
#벡터에서 다른 타입으로 변환
vec<-1:6
vec
#벡터의 각 원소가 리스트으 ㅣ원소로 변환
as.list(vec)
#벡터 전체가 하나의 원소를 갖는 리스트로 변환
list(vec)
#벡터를 행렬로 변환:cbind(),as.matrix(),rbind()
vec<-1:6
vec
cbind(vec)
as.matrix(vec)
rbind(vec)
matrix(vec,2,3)
#벡터를 하나의 열로 구성된 데이터 프레임으로 변환
as.data.frame(vec)
as.matrix(vec)
#벡터를 하나의 행으로 구성된 데이터프레임으로 변환
as.data.frame(rbind(vec))
#벡터를 하나의 행으로 구성된 데이터프레임으로 변환
rbind(vec)
as.data.frame(rbind(vec))
rbind(vec) #vector->matrix->df
class(rbind(vec))
#3행 2열(1~6값이 저장됨) 행렬=> 벡터, 리스트,데이터프레임으로 변환
mat<-matrix(1:6,3,2)
as.vector(mat)
as.list(mat)
as.data.frame(mat)
lst<-list(odd=c(1,3,5),even=c(2,4,6))
lst
unlist(lst)
#as.vector함수로 작성해도 아무 변화 없음(unlist를 써야됨)
as.vector(lst)
identical(lst,as.vector(lst))  #TRUE
lst2<-list(odd=c(1,3,5),even=c('two','four','six'))
lst2
unlist(lst2)
#리스트->행렬: unlist(벡터)->행렬
lst<-list(odd=c(1,3,5),even=c(2,4,6))
lstvec<-unlist(lst)
matrix(lstvec,3,2)
#dimnames인수:리스트의 원소 이름을 행렬의 행 또는 열 이름으로 사용
matrix(unlist(lst),3,2,dimnames = list(NULL,names(lst)) )
#주의사항: 리스트에 matrix함수, as.matrix를 그대로 적용하면 행렬로 변환 안됨
#오류
matrix(lst)
as.matrix(lst)
#as.data.frame():리스트->데이터프레임으로 변환
#숫자와 문자가 섞여 있으면, 숫자->숫자벡터로, 문자->문자벡터로 변환됨
lst<-list(odd=c(1,3,5),even=c(2,4,6))
lstdf<-as.data.frame(lst)
str(lstdf)
#as.data.frame():리스트->데이터프레임으로 변환
#숫자와 문자가 섞여 있으면, 숫자->숫자벡터로, 문자->문자벡터로 변환됨
lst<-list(odd=c(1,3,5),even=c(2,4,6))
lstdf<-as.data.frame(lst)
lstdf
str(lstdf)
lst2<-list(odd=c(1,3,5),even=c('two','four','six'))
lstdf2<-as.data.frame(lst2)
str(lstdf2)
lst2<-list(odd=c(1,3,5),even=c('two','four','six'))
lstdf2<-as.data.frame(lst2)
lstdf2
df1<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df1
df1[1,]
df1<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df1<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df1
df1[1,]
str(df1[1,])  #행은 데이터프레임!!!
df1[,1]
str(df1[,1])  #열은 벡터!!!
df1[[1]]  #벡터
df2<-data.frame(odd=c(1,3,5),even=c(2,4,6))
df2
#1)데이터프레임->행렬
as.matrix(df2)
#2)행렬->as.vector
as.vector(as.matrix(df2))
df3<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
df3
as.matrix(df3)  #메트릭스는 타입이 모두 동일해야하니 타입이 동일해짐
as.vector(as.matrix(df3))
as.vector(as.matrix(df3))
df4<-data.frame(odd=c(1,3,5),even=c(2,4,6))
as.list(df4)
str(as.list(df4))
df5<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
as.list(df5)
str(as.list(df5))
df5<-data.frame(odd=c(1,3,5),even=c(2,4,6))
as.matrix(df5)
df6<-data.frame(odd=c(1,3,5),even=c('two','four','six'))
as.matrix(df6)
