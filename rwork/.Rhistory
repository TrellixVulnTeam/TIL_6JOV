opar<-par(mfrow=c(1,2))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone2')
par(opar)
p11<-par(mfrow=c(1,2))
p11<-par(mfrow=c(1,))
p11<-par(mfrow=c(1,1))
r
p11<-par(mfrow=c(1,1))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
p12<-par(mfrow=c(1,2))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
par(p11)
par(p11)
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
dev.off()
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
p12<-par(mfcol=c(1,2))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
p12<-par(mfcol=c(1,2))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
p12<-par(mfcol=c(2,1))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
p22<-par(mfcol=c(2,2))
p22<-par(mfcol=c(2,2))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
p22<-par(mfrow=c(2,2))
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
plot(Ozone$V8, Ozone$V9,xlab='sandburg',ylab='El Monte',main='Ozone')
train <- read.csv('train.csv',na.strings = '')
test <- read.csv('test.csv',na.strings = '')
train <- read.csv('train.csv',na.strings = '')
test <- read.csv('test.csv',na.strings = '')
train$Sex
#Sex
train$Sex<- ifelse(train$Sex=='male',0,1)
train
#Embarked
sum(is.na(train$Embarked)) # 2
y<-table(train$Embarked)
y
train[is.na(train$Embarked),]$Embarked <-names(y)[which(y==max(y))]
train$Embarked[train$Embarked=='S']<-1
train$Embarked[train$Embarked=='C']<-2
train$Embarked[train$Embarked=='Q']<-3
#Age
scaled <- data.frame(sapply(train[,c('Pclass', 'SibSp', 'Parch', 'Fare','Embarked','Sex')], as.numeric))
scaled <-apply(scaled,2,function(x){(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))})
age.naidx <-which(is.na(train$Age))
age.naidx
#cor함수: 상관계수 ->두 변수 사이에 상관성을 수치로, 하나의 변수의 값의 변화에 따라 다른 변수가 어떻게 변하는지 (+1~-1)
#절대값이 0.7정도 이상이면 강한 상관관계,
#Age열과 가장 상관관계가 높은 것
cor(scaled[-age.naidx,],train[-age.naidx,]$Age)
# Pclass   -0.36922602
# SibSp    -0.30824676
# Parch    -0.18911926
# Fare      0.09606669
# Embarked  0.01017065
# Sex      -0.09325358
scaled[,c('Pclass','SibSp','Parch')]
# Pclass   -0.36922602
# SibSp    -0.30824676
# Parch    -0.18911926
# Fare      0.09606669
# Embarked  0.01017065
# Sex      -0.09325358
t(scaled[,c('Pclass','SibSp','Parch')])
#Age결측값 대체
for (i in age.naidx){
eu.dis<-sqrt(colSums((t(scaled[,c('Pclass','SibSp','Parch')])-scaled[i,c('Pclass','SibSp','Parch')])^2))
top10.idx<-order(eu.dis)[1:10]
train$Age[i]<-mean(train[top10.idx,'Age'],na.rm=T)
}
train$Age
scaled[,c('Pclass','SibSp','Parch')]-scaled[i,c('Pclass','SibSp','Parch')]
t(scaled[,c('Pclass','SibSp','Parch')])-scaled[i,c('Pclass','SibSp','Parch')]
head(scaled[,c('Pclass','SibSp','Parch')]-scaled[i,c('Pclass','SibSp','Parch')])
head(t(scaled[,c('Pclass','SibSp','Parch')])-scaled[i,c('Pclass','SibSp','Parch')])
#Age결측값 대체
for (i in age.naidx){
eu.dis<-sqrt(colSums((t(scaled[,c('Pclass','SibSp','Parch')])-scaled[i,c('Pclass','SibSp','Parch')])^2))
top10.idx<-order(eu.dis)[1:10]
train$Age[i]<-mean(train[top10.idx,'Age'],na.rm=T)
}
sum(is.na(train$Age))
scaled <- data.frame(sapply(train[,c('Age', 'Fare','Embarked','Sex')], as.numeric))
scaled <-apply(scaled,2,function(x){(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))})
scaled
class(scaled)
scaled<-as.data.frame(scaled)
class(scaled)
#abcd 가중치
model1 <-function(a,b,c,d){
scaled <-scaled %>%
mutate(Predictions =Sex*a+Fare*b+Age*c+Embarked*d)
return(scaled)
}
#이 값을 얼마로 설정하느냐(임계치 값을 얼마로 설정할건지)
#sigmoid함수
scaled<-model1(0.5,0.3,0.1,0.1)
train_pred <-round(scaled$Predictions)
train_pred
head(train)
head(scaled)
train_pred <-round(scaled$Predictions)
train_pred
sum(train$Survived==train_pred)
#Sex
test$Sex<- ifelse(test$Sex=='male',0,1)
test
#Embarked
sum(is.na(test$Embarked)) # 2
test$Embarked[test$Embarked=='S']<-1
test$Embarked[test$Embarked=='C']<-2
test$Embarked[test$Embarked=='Q']<-3
#Fare 결측값 채우기
sum(is.na(test$Fare)) #1
test$Pclass<-sapply(test[,'Pclass'], as.numeric)
test$Fare
###Fare, Pclass상관관계가 높고, Fare 범위가 넓기때문에 Pclass==1의 중앙값으로 대체
cor(test[!(is.na(test$Fare)),'Pclass'],test[!(is.na(test$Fare)),]$Fare) #-0.5771473
###Fare, Pclass상관관계가 높고, Fare 범위가 넓기때문에 Pclass==1의 중앙값으로 대체
cor(test[!(is.na(test$Fare)),'Pclass'],test[!(is.na(test$Fare)),]$Fare) #-0.5771473
cor(test[!(is.na(test$Fare)),'Pclass'],test[!(is.na(test$Fare)),'Fare']) #-0.5771473
which(is.na(test$Fare))# 153
test[153,'Pclass'] #3
test[153,'Pclass'] #3
median(test[test$Pclass==3,]$Fare,na.rm = T)
test[153,'Fare']<-7.8958
#Age (유클리디안 거리로 결측값 채우기)
scaled <- data.frame(sapply(test[,c('Pclass', 'SibSp', 'Parch', 'Fare','Embarked','Sex')], as.numeric))
scaled <-apply(scaled,2,function(x){(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))})
scaled
age.naidx <-which(is.na(test$Age))
for (i in age.naidx){
eu.dis<-sqrt(colSums((t(scaled[,c('Pclass','SibSp','Parch')])-scaled[i,c('Pclass','SibSp','Parch')])^2))
top10.idx<-order(eu.dis)[1:10]
test$Age[i]<-mean(test[top10.idx,'Age'],na.rm=T)
}
#모델링
scaled <- data.frame(sapply(test[,c('Age', 'Fare','Embarked','Sex')], as.numeric))
scaled <-apply(scaled,2,function(x){(x-min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T))})
scaled<-as.data.frame(scaled)
model1 <-function(a,b,c,d){
scaled <-scaled %>%
mutate(Predictions =Sex*a+Fare*b+Age*c+Embarked*d)
return(scaled)
}
scaled<-model1(0.5,0.3,0.1,0.1)
test_pred <-round(scaled$Predictions)
test_pred
submission <- as.data.frame(cbind(test$PassengerId,test_pred))
submission
colnames(submission)[1] <- 'PassengerId'
colnames(submission)[2] <- 'Survived'
write.csv(submission,file='submission_model1.csv',row.names = F)
#2번에서 결측값 채운 데이터 이용
train$Age
train$ages <-cut(train$Age,
breaks=c(0,10,20,30,40,50,max(titanic$Age,na.rm = T)+1),
right=FALSE,
labels=c(0:5)
)
train$ages
#Pclass
train$Pclass <- factor(train$Pclass,order=TRUE,levels=c(3,2,1))
train$Pclass
#Sex
train$Sex<-ifelse(train$Sex=='male',0,1)
train$Sex
#나이X생존률
proportions(table(train[,c('ages','Survived')]),1)
#성별x생존률
proportions(table(train[,c('Sex','Survived')]),1)
#등급X생존률
proportions(table(train[,c('Pclass','Survived')]),1)
# 성별X등급X생존률
with(train,aggregate(Survived,list(sex=Sex,pclass=Pclass),mean))
# 성별X나이X생존률
with(train,aggregate(Survived,list(sex=Sex,age=ages),mean))
# 성별X나이X생존률
with(train,aggregate(Survived,list(sex=Sex,age=ages),mean))
with(train,aggregate(Survived,list(sex=Sex,age=ages,pclass=Pclass),mean))
with(train,aggregate(Survived,list(sex=Sex,age=ages,pclass=Pclass),mean))
library(dplyr)
train<-train %>%
mutate(Pred=ifelse(Sex==0,0,1))
for(i in seq(1:nrow(train))){
if( train$ages[i]==0&train$Pclass[i]%in%c(1,2) ){
train$Pred[i]<-1
}
else if(train$Pclass[i]==3){
train$Pred[i]<-0
}
}
sum(train$Pred==train$Survived)/nrow(titanic)
#test set에 적용
#Age
test$Age
test$ages <-cut(test$Age,
breaks=c(0,10,20,30,40,50,max(titanic$Age,na.rm = T)+1),
right=FALSE,
labels=c(0:5)
)
test$ages
#Pclass
test$Pclass <- factor(test$Pclass,order=TRUE,levels=c(3,2,1))
test$Pclass
test$Sex
test<-test%>%
mutate(Survived=ifelse(Sex==0,0,1))
for(i in seq(1:nrow(test))){
if( test$ages[i]==0&test$Pclass[i]%in%c(1,2) ){
test$Survived[i]<-1
}
else if(test$Pclass[i]==3){
test$Survived[i]<-0
}
}
tail(test,5)
submission_model2<-test[,c('PassengerId','Survived')]
submission_model2
write.csv(submission_model2,file='submission_model2.csv',row.names = F)
library(class)
normalize<-function(x){
return ( (x-min(x) )/( max(x)-min(x) ) )
}
train_num <- data.frame(sapply(train[,c('Pclass', 'SibSp', 'Parch', 'Fare','Embarked','Sex','Age')], as.numeric))
train_n<-as.data.frame(lapply(train_num,normalize))
test_num<-data.frame(sapply(test[,c('Pclass', 'SibSp', 'Parch', 'Fare','Embarked','Sex','Age')], as.numeric))
test_n<-as.data.frame(lapply(test_num,normalize))
titanic_train_labels <-train[,'Survived']
titanic_test_pred<-knn(train=train_n,test=test_n,
cl=titanic_train_labels,k=5)
titanic_test_pred#예측
train_num <- data.frame(sapply(train[,c('Pclass', 'SibSp', 'Parch', 'Fare','Embarked','Sex','Age')], as.numeric))
train_n<-as.data.frame(lapply(train_num,normalize))
test_num<-data.frame(sapply(test[,c('Pclass', 'SibSp', 'Parch', 'Fare','Embarked','Sex','Age')], as.numeric))
test_n<-as.data.frame(lapply(test_num,normalize))
titanic_train_labels <-train[,'Survived']
titanic_test_pred<-knn(train=train_n,test=test_n,
cl=titanic_train_labels,k=5)
titanic_test_pred#예측
titanic_test_pred<-knn(train=train_n,test=test_n,cl=titanic_train_labels,k=5)
titanic_test_pred<-knn(train=train_n,test=test_n,cl=titanic_train_labels,k=5)
titanic_test_pred#예측
submission_model3<-as.data.frame(cbind(test$PassengerId,titanic_test_pred))
#주소로부터 버섯 데이터 다운로드
url<-'https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data'
download.file(url=url,destfile = 'data/mushroom.csv')
#주소로부터 버섯 데이터 다운로드
url<-'https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data'
download.file(url=url,destfile = 'mushroom.csv')
mush<-read.csv('mushroom.csv',na.string='?',header = F)
head(mush)
colnames(mush)<-c('label','cap-shape','cap-surface','cap-color','bruises?',
'odor','gill-attachment','gill-spacing','gill-spacing',
'gill-size','gill-color','stalk-shape','stalk-root',
'stalk-surface-above-ring','stalk-color-above-ring',
'stalk-color-below-ring','veil-type','veil-color','ring-number',
'ring-type','spore-print-color','population','habitat')
str(mush)
#전처리(결측값)stalk-shape
library(Amelia)
missmap(mush,col=c('red','blue'))
idx<which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
head(mush)
mush[is.na(mush[,'stalk-shape']
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
Na_predict<-c()
#전처리(결측값)stalk-shape
library(Amelia)
missmap(mush,col=c('red','blue'))
idx<which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
Na_predict<-c()
idx<-which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
Na_predict<-c()
N_na
target
for(i in 1:N_na){
na_sample<-unlist(mush[is.na(mush[,'stalk-shape']),-idx][i,,drop=T])
ans<-target==na_sample
similar_idx<-as.numeric(sort(colSums(ans),decreasing = T)[1:5])
Na_predict<-c(Na_predict,names(sort(table(mush[similar_idx,idx]),decreasing = T))[1])
}
mush[is.na(mush[,'stalk-shape']),idx]<-Na_predict
sum(!complete.cases(mush))
N_na
target
mush[!is.na(mush[,'stalk-shape']),-idx]
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
target
Na_predict<-c()
N_na
for(i in 1:N_na){
na_sample<-unlist(mush[is.na(mush[,'stalk-shape']),-idx][i,,drop=T])
ans<-target==na_sample
similar_idx<-as.numeric(sort(colSums(ans),decreasing = T)[1:5])
Na_predict<-c(Na_predict,names(sort(table(mush[similar_idx,idx]),decreasing = T))[1])
}
mush[is.na(mush[,'stalk-shape']),idx]<-Na_predict
sum(!complete.cases(mush))
target
target
is.na(mush[,'stalk-shape'])
sum(is.na(mush[,'stalk-shape']))
N_na
target
#
mush[!is.na(mush[,'stalk-shape']),-idx]
#
is.na(mush[,'stalk-shape'])
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
target
mush[!is.na(mush[,'stalk-shape']),-idx]
missmap(mush,col=c('red','blue'))
#전처리(결측값)stalk-shape
library(Amelia)
missmap(mush,col=c('red','blue'))
idx<-which(names(mush)=='stalk-shape')
missmap(mush,col=c('red','blue'))
sum(is.na(mush$`stalk-shape`))
sum(is.na(mush$stalk-shape))
is.na(mush$`stalk-shape`)
for(i in 1:N_na){
na_sample<-unlist(mush[is.na(mush[,'stalk-shape']),-idx][i,,drop=T])
ans<-target==na_sample
similar_idx<-as.numeric(sort(colSums(ans),decreasing = T)[1:5])
Na_predict<-c(Na_predict,names(sort(table(mush[similar_idx,idx]),decreasing = T))[1])
}
mush[is.na(mush[,'stalk-shape']),idx]<-Na_predict
sum(!complete.cases(mush))
str(mush)
features<-colnames(mush)[-1]
colnames(mush)
end<-ncol(mush)
mushOnehot<-mush[c(1,24:end)]
str(mushOnehot)
head(mushOnehot)
set.seed(1234)
sample_idx<-sample(1:len,len*0.3)
train<-mushOnehot[-sample_idx,-1]
test<-mushOnehot[sample_idx,-1]
train_labels<-mushOnehot[-sample_idx,1]
test_labels<-mushOnehot[sample_idx,1]
library(class)
for(feature in features){
iter<-unique(mush[[feature]])
for(i in iter){
new_col<-paste(feature,i,sep='')
mush[new_col]<-ifelse(mush[feature]==i,1,0)
}
}
#train/test 분할
len<-nrow(mushOnehot)
#전처리(결측값)stalk-shape
library(Amelia)
missmap(mush,col=c('red','blue'))
idx<-which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
#na개수
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
N_na
# 13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s
# 14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y
# 15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y
# 16. veil-type: partial=p,universal=u
# 17. veil-color: brown=n,orange=o,white=w,yellow=y
# 18. ring-number: none=n,one=o,two=t
# 19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z
# 20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y
# 21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y
# 22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d
data(mush)
#주소로부터 버섯 데이터 다운로드
url<-'https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data'
download.file(url=url,destfile = 'mushroom.csv')
mush<-read.csv('mushroom.csv',na.string='?',header = F)
colnames(mush)<-c('label','cap-shape','cap-surface','cap-color','bruises?',
'odor','gill-attachment','gill-spacing','gill-spacing',
'gill-size','gill-color','stalk-shape','stalk-root',
'stalk-surface-above-ring','stalk-color-above-ring',
'stalk-color-below-ring','veil-type','veil-color','ring-number',
'ring-type','spore-print-color','population','habitat')
str(mush)
#전처리(결측값)stalk-shape
library(Amelia)
missmap(mush,col=c('red','blue'))
idx<-which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
#na개수
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
N_na
mush[is.na(mush[,'stalk-shape']),-idx]
#na개수  #2480
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
N_na
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
target
is.na(mush[,'stalk-shape'])
sum(is.na(mush[,'stalk-shape']))
#na가 아닌 개수
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
target
sum(mush[!is.na(mush[,'stalk-shape']),-idx])
sum(nrow[!is.na(mush[,'stalk-shape']),-idx])
#na가 아닌 개수
mush[!is.na(mush[,'stalk-shape']),-idx]
Na_predict<-c()
na_sample<-unlist(mush[is.na(mush[,'stalk-shape']),-idx][2480,,drop=T])
na_sample
target
#### 인터넷에 있는 데이터 읽어오기 ####
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data'
mushroom <- read.csv(file=url, header=F, na.strings='?')
str(mushroom)
#### 정답 데이터 분리 ####
mushroom.answer <- mushroom[,1]
mushroom[,1] <- NULL
#### 각 컬럼 별 NA 값 확인 ####
apply(mushroom, 2, function(x) sum(is.na(x))) # V12 2480
#### V12 결측값 채우기 1 ####
# 이후에 나오는 함수에서 names로 찾으려고 factor화
mushroom$V12 <- factor(mushroom$V12)
# NA 행과 나머지 행 인덱스로 나누기
na.idx <- which(is.na(mushroom[,11]))
compare.idx <- which(!is.na(mushroom[,11]))
# 값 참조할 데이터 만들기
set.seed(1234)
compare <- sample_frac(mushroom[-na.idx,] , size=0.3)
# 값 참조할 데이터 만들기
library(dplyr)
set.seed(1234)
compare <- sample_frac(mushroom[-na.idx,] , size=0.3)
# 값 비교할 컬럼들
#na: stalk-root
t.cols <- c(9,10,12) # stalk-shape, stalk-surface-below-ring, stalk-surface-above-ring
# 주의: 아아주 오래 걸림
for (i in na.idx){
idx <- compare.idx %>%
sapply(function(x) sum(compare[x,t.cols]==mushroom[i,t.cols])) %>%
order(decreasing=T) %>%
head(5)
mushroom[i,11] <- names(which.max(table(compare$V12[idx])))
print(i)
}
toNum <- function(x) {
f <- as.numeric(factor(x, labels=(1:length(unique(na.omit(x))))))
}
mush.num <- as.data.frame(apply(mushroom, 2, toNum))
mush.num
#### 문자 --> 수치 변환 ####
#### chr 변수를 num factor로 변경 ####
head(mushroom)
toNum <- function(x) {
f <- as.numeric(factor(x, labels=(1:length(unique(na.omit(x))))))
}
mush.num <- as.data.frame(apply(mushroom, 2, toNum))
mush.num
mush.encoded <- data.frame(1:8124)
mush.encoded
head(mush.encoded)
ncol(mush.num)
mush.num[,2]
mush.num
mush.num[,2]
mush.num
mush.num[,2]
unique(na.omit(mushroom))
unique(1:10)
unique(c(1,1,2,3))
length(unique(na.omit(mushroom)))
unique(na.omit(mushroom))
mush.num <- as.data.frame(apply(mushroom, 2, toNum))
mush.num
mush.encoded <- data.frame(1:8124)
head(mush.encoded)
ncol(mush.num)
max(mush.num[,22]
max(mush.num[,22])
max(mush.num[,i])
max(mush.num[,22])
mush.num
mapply(rep, rep(0, 7), nrow(mush.num))
# 0*n 으로 이루어진 리스트 만들기
for(i in 1:ncol(mush.num)){
n <- max(mush.num[,i])
mush.zero <- mapply(rep, rep(0, n), nrow(mush.num))
# 1, 0 채우기
for (j in 1:8124){
mush.zero[j, mush.num[j,i]] <- 1
}
mush.zero <- as.data.frame(mush.zero)
names(mush.zero)<- paste(i, rep(1:n), sep='-')
mush.encoded <- cbind(mush.encoded, mush.zero)
}
str(mush.encoded)
