idx<-which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
#na개수  #2480
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
N_na
#na가 아닌 개수
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
target
mush[is.na(mush[,'stalk-shape']),-idx][1,,drop=T]
mush[!is.na(mush[,'stalk-shape']),-idx]
target=unlist(mush[is.na(mush[,'stalk-shape']),-idx][1,,drop=T])
ans<-target=unlist(mush[is.na(mush[,'stalk-shape']),-idx][1,,drop=T])
ans<-target==unlist(mush[is.na(mush[,'stalk-shape']),-idx][1,,drop=T])
ans
ans<-target==unlist(mush[is.na(mush[,'stalk-shape']),-idx][2,,drop=T])
ans
#(함수 또는 표현식, 시작점, 끝점)
curve(sin,0,2*pi)
#cars 선형회귀->신뢰구간 출력
#speed, dist
lm(dist~speed,cars)  #종속변수(y축)~ 독립변수(x축)
#cars 선형회귀->신뢰구간 출력
#speed, dist
lm(dist~speed,car)  #종속변수(y축)~ 독립변수(x축)
#cars 선형회귀->신뢰구간 출력
#speed, dist
lm(dist~speed,cars)  #종속변수(y축)~ 독립변수(x축)
data(cars)
#cars 선형회귀->신뢰구간 출력
#speed, dist
lm(dist~speed,cars)  #종속변수(y축)~ 독립변수(x축)
#cars 선형회귀->신뢰구간 출력
#speed, dist
m<-lm(dist~speed,cars)  #종속변수(y축)~ 독립변수(x축)
m
abline(m)
#speed에 따라 dist 어떻게 되는지
p<-predict(m, interval = 'confidence')
p
plot(cars)
abline(m)
#cars 선형회귀->신뢰구간 출력
#speed, dist
dev.off()
m<-lm(dist~speed,cars)  #종속변수(y축)~ 독립변수(x축)
m
plot(cars)
abline(m)
rev(cars$speed)
x<-c(cars$speed, tail(cars$speed,1), rev(cars$speed), cars$speed[1])
y<-c(p[,'lwr'],tail(p[,'upr'],1),rev(p[,'upr']),p[,'lwr'][1])
polygon(x,y,col=rgb(.7,.7,.7,.5))
polygon(x,y,col=rgb(.7,.7,.7,1))
polygon(x,y,col=rgb(.7,.7,.7,0.3))
polygon(x,y,col=rgb(.7,.7,.7,.0.3))
plot(cars)
#다각형(x의 첫번째 인수와 y의 첫번째 인수 한 점...)
dev.off()
x<-c(cars$speed, tail(cars$speed,1), rev(cars$speed), cars$speed[1])
y<-c(p[,'lwr'],tail(p[,'upr'],1),rev(p[,'upr']),p[,'lwr'][1])
polygon(x,y,col=rgb(.7,.7,.7,.0.3))
plot(cars)
x<-c(cars$speed, tail(cars$speed,1), rev(cars$speed), cars$speed[1])
y<-c(p[,'lwr'],tail(p[,'upr'],1),rev(p[,'upr']),p[,'lwr'][1])
polygon(x,y,col=rgb(.7,.7,.7,.0.3))
plot(cars)
abline(m)
#speed에 따라 dist 어떻게 되는지
#fit: 회귀모델로 적합된 값
#lwr:신뢰구간의 하한
#upr:신뢰구간의 상한
p<-predict(m, interval = 'confidence')
p
#다각형(x의 첫번째 인수와 y의 첫번째 인수 한 점...)
dev.off()
x<-c(cars$speed, tail(cars$speed,1), rev(cars$speed), cars$speed[1])
y<-c(p[,'lwr'],tail(p[,'upr'],1),rev(p[,'upr']),p[,'lwr'][1])
polygon(x,y,col=rgb(.7,.7,.7,.0.3))
polygon(x,y,col=rgb(.7,.7,.7,.1))
plot(cars)
abline(m)
#speed에 따라 dist 어떻게 되는지
#fit: 회귀모델로 적합된 값
#lwr:신뢰구간의 하한
#upr:신뢰구간의 상한
p<-predict(m, interval = 'confidence')
p
#다각형(x의 첫번째 인수와 y의 첫번째 인수 한 점...)
dev.off()
x<-c(cars$speed, tail(cars$speed,1), rev(cars$speed), cars$speed[1])
y<-c(p[,'lwr'],tail(p[,'upr'],1),rev(p[,'upr']),p[,'lwr'][1])
plot(cars)
abline(m)
#speed에 따라 dist 어떻게 되는지
#fit: 회귀모델로 적합된 값
#lwr:신뢰구간의 하한
#upr:신뢰구간의 상한
p<-predict(m, interval = 'confidence')
p
x<-c(cars$speed, tail(cars$speed,1), rev(cars$speed), cars$speed[1])
y<-c(p[,'lwr'],tail(p[,'upr'],1),rev(p[,'upr']),p[,'lwr'][1])
polygon(x,y,col=rgb(.7,.7,.7,.1))
plot(cars, cex=0.5)
text(cars$speed, cars$dist, pos=4, cex=.5)
#글자 출력 ,pos는 글자 위치
text(cars$speed, cars$dist, pos=3, cex=.5)
plot(cars, cex=0.5)
identify(cars$speed, cars$dist)
#범례출력
plot(iris$Sepal.Width, iris$Sepal.Length, cex=.5m pch=20, xlab='width',ylab='length')
#범례출력
plot(iris$Sepal.Width, iris$Sepal.Length, cex=.5, pch=20, xlab='width',ylab='length')
points(iris$Petal.Width,iris$Petal.Length, cex=.5, pch='+',col='red')
legent('topright')
legent('topright', legeng=c('Sepal','Petal'))
legent('topright', legeng=c('Sepal','Petal'))
legend('topright', legeng=c('Sepal','Petal'))
legend('topright', legend=c('Sepal','Petal'), pch=c(20,43), cex=.8, col=c('black','green'))
legend('topright', legend=c('Sepal','Petal'), pch=c(20,43), cex=.8, col=c('black','red'), bg='gray')
boxplot(iris$Sepal.Width)
boxstates<-boxplot(iris$Sepal.Width)
boxstates
boxstats<-boxplot(iris$Sepal.Width)
boxstats
hist(iris$Sepal.Length)
hist(iris$Sepal.Length)
log2(150)
hist(iris$Sepal.Length, freq = FALSE)
x<-hist(iris$Sepal.Length, freq = FALSE)  # freq= FALSE면적의 합이 1이 됨
x
plot(density(iris$Sepal.Width))
dev.off()
plot(density(iris$Sepal.Width))
hist(density(iris$Sepal.Width,freq=FALSE))
hist(iris$Sepal.Width,freq=FALSE)
lines(density(iris$Sepal.Width))
dev.off()
#밀도 그림 그래프 (hitogram에서 중심을 지나도록 그려짐)
plot(density(iris$Sepal.Width))
dev.off()
#
hist(iris$Sepal.Width,freq=FALSE)
lines(density(iris$Sepal.Width))
tapply(iris$Sepal.Width, iris$Species, mean)
barplot(tapply(iris$Sepal.Width, iris$Species, mean))
#데이터의 비율: pie그래프
cut(1:10, c(0,5,10))
cut(1:10, breaks=3)
#데이터의 비율: pie그래프
cut(iris$Sepal.Width, breaks=10)
rep(c('a','b','c'),1:3)
table(rep(c('a','b','c'),1:3))
table(cut(iris$Sepal.Width, breaks=10))
pie(table(cut(iris$Sepal.Width, breaks=10)), cex=.7)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(data=mtcars)
ggplot(data=mtcars, aes(x=wt, y=mpg))
#aes축 정보 설정
ggplot(data=mtcars, aes(x=wt, y=mpg))+
geom_point()
#aes축 정보 설정
ggplot(data=mtcars, aes(x=wt, y=mpg))+
geom_point()+
labs(title='mytitle',
x='weight', y='mpg')
mtcars$gear
class(mtcars$gear)
mtcars$gear<-factor(mtcars$gear,levels = c(3,4,5),
labels = c('3 gears','4 gears','5 gears'))
mtcars$cyl
mtcars$cyl<-factor(mtcars$cyl,levels = c(4,6,8),
labels = c('4 cylinders','6 cylinders','8 cylinders'))
ggplot(data=mtcars, aes(x=mpg)+
geom_histogram())
ggplot(data=mtcars, aes(x=mpg))+
geom_histogram()
ggplot(data=mtcars, aes(x=mpg))+
geom_histogram()+
facet_grid(cyl~.)
ggplot(data=mtcars, aes(x=mpg))+
geom_histogram()+
facet_grid(cyl~.)+  #실린더에 따라 나누어 데이터
labs(title="cyl vs mpg')
####################################################
ggplot(data=mtcars, aes(x=wt, y=mpg))+
geom_point()+
labs(title='mytitle',
x='weight', y='mpg')
ggplot(data=mtcars, aes(x=mpg))+
geom_histogram()+
facet_grid(cyl~.)+  #실린더에 따라 나누어 데이터
labs(title="cyl vs mpg")
ggplot(data=mtcars, aes(x=cyl, y=mpg))+
geom_boxplot()+
labs(x='cyl',y=mpg)
ggplot(data=mtcars, aes(x=mpg, fill=cyl))+
geom_density()+
labs(x='cyl',y=mpg)
ggplot(data=mtcars, aes(x=cyl, y=mpg))+
geom_boxplot()+
labs(x='cyl',y='mpg')
ggplot(data=mtcars, aes(x=mpg, fill=cyl))+
geom_density()+
labs(x='mpg',y='mpg')
ggplot(data=mtcars, aes(x=mpg, fill=cyl))+
geom_density()+
labs(x='mpg')
mush[is.na(mush[,'stalk-shape']
mush[is.na(mush[,'stalk-shape']),-idx]
mush<-read.csv('mushroom.csv',na.string='?',header = F)
colnames(mush)<-c('label','cap-shape','cap-surface','cap-color','bruises?',
'odor','gill-attachment','gill-spacing','gill-spacing',
'gill-size','gill-color','stalk-shape','stalk-root',
'stalk-surface-above-ring','stalk-color-above-ring',
'stalk-color-below-ring','veil-type','veil-color','ring-number',
'ring-type','spore-print-color','population','habitat')
str(mush)
#전처리(결측값)stalk-shape
library(Amelia)
missmap(mush,col=c('red','blue'))
idx<-which(names(mush)=='stalk-shape')
which(names(mush)=='stalk-shape')
#na개수  #2480
N_na<-nrow(mush[is.na(mush[,'stalk-shape']),-idx])
N_na
#na가 아닌 개수
target<-t(mush[!is.na(mush[,'stalk-shape']),-idx])
mush[is.na(mush[,'stalk-shape']),-idx]
for(i in 1:N_na){
na_sample<-unlist(mush[is.na(mush[,'stalk-shape']),-idx][i,,drop=T]) #nx를 제외한 열에 대해 na행을 검사
ans<<-target==na_sample
similar_idx<-as.numeric(sort(colSums(ans),decreasing = T)[1:5])
Na_predict<-c(Na_predict,names(sort(table(mush[similar_idx,idx]),decreasing = T))[1])
}
ans
ans
for(i in 1:N_na){
na_sample<<-unlist(mush[is.na(mush[,'stalk-shape']),-idx][i,,drop=T]) #nx를 제외한 열에 대해 na행을 검사
ans<<-target==na_sample
similar_idx<-as.numeric(sort(colSums(ans),decreasing = T)[1:5])
Na_predict<-c(Na_predict,names(sort(table(mush[similar_idx,idx]),decreasing = T))[1])
}
target==na_sample
na_sample
mush[!is.na(mush[,'stalk-shape']),-idx]
na_sample
ans
t(ans)
colnames(mush)[-1]
unique(mush[[feature]])
mush[[feature]]
mush[feature]
mush[[feature]]
features
mush[[feature]]
mush
mush[feature]
mush[feature]
head(mush[feature])
teens<-read.csv('snsdata.csv')
teens<-read.csv('snsdata.numbers')
teens<-read.csv('snsdata.csv')
str(teens)
table(teens$gender)
table(teens$gender, useNA='ifany')
age
teens$age
table(teens$age)
teens$age
summary(teens$age)
#13세 이상, 20세 미만: 정상 범위
#이 범위 벗어나면 NA로 처리
teens$age<-ifelse((teens$age>=13 & teens$age<20, teens$age, NA))
#13세 이상, 20세 미만: 정상 범위
#이 범위 벗어나면 NA로 처리
teens$age<-ifelse(teens$age>=13 & teens$age<20, teens$age, NA)
summary(teens$age)
#성별 NA 처리?
#NA자체 종류를 따로 만들기
teens$female<-teensifelse(teens$gender=='F' & !is.na(teens$gender),1,0)  #여성인지의 여부?
#성별 NA 처리?
#NA자체 종류를 따로 만들기
teens$female<-ifelse(teens$gender=='F' & !is.na(teens$gender),1,0)  #여성인지의 여부?
#0인 경우: 남성 or NA
teens$nogender<-ifelse(is.na(teens$gender),1,0) #성별이 없는지 여부?
teens$gender
table(teens$gender)
table(teens$gender,useNA = 'idany')
table(teens$gender,useNA = 'ifany')
table(teens$female, useNA = 'ifany')
table(teens$female)
table(teens$nogender, useNA = 'ifany')
mean(teens$age)
mean(teens$age, na.rm=TRUE)
#퀴즈1.
#졸업연도별 나이 평균 출력
teens %>% group_by(teens$gradyear) %>%
mean(teens$age, na.rm=TRUE)
#퀴즈1.
#졸업연도별 나이 평균 출력
library(dplyr)
teens %>% group_by(gradyear) %>%
summary(mean(teens$age, na.rm=TRUE))
teens %>% group_by(gradyear) %>%
summary(mean<-mean(teens$age, na.rm=TRUE))
tapply(teens$age, teens$gradyear,mean,na.rm=T)
teens %>% group_by(gradyear) %>%
mean(teens$age, na.rm=TRUE)
#퀴즈1.
#졸업연도별 나이 평균 출력
library(dplyr)
teens %>% group_by(gradyear) %>%
summary(mean(age, na.rm=TRUE))
aggregate(data=teens, age~ gradyear, mean, na.rm=T)
aggregate(data=teens, age~gradyear, mean, na.rm=T)
#ave_age<-ave(data, group, fun)
ave_age<-ave(teens$age, teens$gradyear, FUN=mean)
teens%age<-ifelse(is.na(teens$age), ave_age, teens$age) #결측값 대체
teens$age<-ifelse(is.na(teens$age), ave_age, teens$age) #결측값 대체
#ave_age<-ave(data, group, fun)
ave_age<-ave(teens$age, teens$gradyear, FUN=function(x) mean(x, na.rm = TRUE))
teens$age<-ifelse(is.na(teens$age), ave_age, teens$age) #결측값 대체
teens$age
summary(teens$age)
#kmeans 클러스터링
interests<-teens[5:40]
lapply(interests, scale)
interests_z<-as.data.frame(lapply(interests, scale))
interests_z
teens[5:40]
set.seed(2345)
kmeans(interests_z, 5)
teen_clusters<-kmeans(interests_z, 5)
teen_clusters
interests_z
set.seed(2345)
teen_clusters<-kmeans(interests_z, 5)
teen_clusters
teen_clusters$size
lapply(interests, scale)
class(lapply(interests, scale))
teen_clusters$centers
teen_clusters$cluster #각 데이터별 할당된 클러스터 번호
teen_clusters
teen_clusters$withinss
teen_clusters$tot.withinss
teen_clusters$betweenss
##
teens$cluster<-teen_clusters$cluster
teens
#클러스터  나이의 평균
aggregate(teens, age ~ cluster, mean)
#클러스터  나이의 평균
aggregate(data=teens, age ~ cluster, mean)
aggregate(data=teens, female~cluster,mean )
#클러스터 친구수
aggregate(data=teens, friends ~cluster, mean)
# 1.mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# mpg 데이터 원본에는결측치가 없습니다. 우선 mpg 데이터를 불러와 몇 개의 값을 결측치로 만들겠습니다.
# 아래 코드를 실행하면 다섯 행의 hwy 변수에 NA가 할당됩니다.
mpg <- as.data.frame(ggplot2::mpg) # mpg 데이터 불러오기
mpg[c(65, 124, 131, 153, 212), "hwy"]
mpg[c(65, 124, 131, 153, 212), "hwy"] <- NA # NA 할당하기
# Q1. drv(구동방식)별로 hwy(고속도로 연비) 평균이 어떻게 다른지 알아보려고 합니다. 분석을 하기 전에
# 우선 두 변수에 결측치가 있는지 확인해야 합니다. drv 변수와 hwy 변수에 결측치가 몇 개 있는지
# 알아보세요.
sum(is.na(mpg$drv))
sum(is.na(mpg$hwy))
# Q2. filter()를 이용해 hwy 변수의 결측치를 제외하고, 어떤 구동방식의 hwy 평균이 높은지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
group_by(drv) %>%
filter(hwy,!is.na(data)) %>%
summary(mean(hwy))
mpg %>%
filter(!is.na(mpg)) %>%
group_by(drv) %>%
summary(mean(hwy))
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summary(mean(hwy))
# 2. mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# 우선 mpg 데이터를 불러와서 일부러 이상치를 만들겠습니다. drv(구동방식) 변수의 값은 4(사륜구동),
# f(전륜구동), r(후륜구동) 세 종류로 되어있습니다. 몇 개의 행에 존재할 수 없는 값 k를 할당하겠습니다.
# cty(도시 연비) 변수도 몇 개의 행에 극단적으로 크거나 작은 값을 할당하겠습니다.
mpg <- as.data.frame(ggplot2::mpg) # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k" # drv 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42) # cty 이상치 할당
# 이상치가 들어있는 mpg 데이터를 활용해서 문제를 해결해보세요.
# 구동방식별로 도시 연비가 다른지 알아보려고 합니다. 분석을 하려면 우선 두 변수에 이상치가 있는지
# 확인하려고 합니다.
# • Q1. drv 에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가 사라졌는지 확인하세요. 결측
# 처리 할 때는 %in% 기호를 활용하세요.
table(mpg$drv)
mpg$drv<-ifelse(mpg$drv %in% c('4','f','r'), mpg$drv, NA)
table(mpg$drv)
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
dev.off()
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
dev.off()
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
dev.off()
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
dev.off()
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
mpg$cty<-ifelse(mpg$cty < 9 | mpg$cty>26, NA, mpg$cty)
mpg$cty<-ifelse(mpg$cty < 9 | mpg$cty>26, NA, mpg$cty)
boxplot(mpg$cty)
boxplot(mpg$cty)
dev.off()
# • Q2. 상자 그림을 이용해서 cty 에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를
# 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
mpg$cty<-ifelse(mpg$cty < 9 | mpg$cty>26, NA, mpg$cty)
boxplot(mpg$cty)
boxplot(mpg$cty)
boxplot(mpg$cty)
boxplot(mpg$cty)
boxplot(mpg$cty)
boxplot(mpg$cty)
dev.off()
mpg$cty<-ifelse(mpg$cty < 9 | mpg$cty>26, NA, mpg$cty)
boxplot(mpg$cty)
# • Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음 drv 별로 cty
# 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is.na(drv) & !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_hwy= mean(cty))
# 3. kmeans를 이용하여 iris 데이터를 3개 그룹으로 나누어보세요
library(caret)
set.seed(1712)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = F)
# 3. kmeans를 이용하여 iris 데이터를 3개 그룹으로 나누어보세요
iris.copy<-iris
colnames(iris.copy)
iris.copy_kmenas<-kmenas(iris.copy[,-5], centers = 3)
iris.copy_kmeans<-kmenas(iris.copy[,-5], centers = 3)
iris.copy_kmeans<-kmenas(iris.copy[,-5], centers = 3)
iris.copy_kmeans<-kmeans(iris.copy[,-5], centers = 3)
iris.copy_kmeans$centers
data(iris)
iris.copy<-iris
trainig.data<-scale(training[,-5])
iris.scale<-scale(training[,-5])
iris.scale<-scale(iris.copy[,-5])
summary(iris.copy)
data(iris)
iris.copy<-iris
iris.scale<-scale(iris.copy[-5])
summary(iris.copy)
summary(iris.scale)
iris.copy_kmeans<-kmeans(iris.copy[,-5], centers = 3)
iris.copy_kmeans$centers
data(iris)
iris.copy<-iris
iris.scale<-scale(iris.copy[-5])
summary(iris.scale)
iris.copy_kmeans<-kmeans(iris.scale[,-5], centers = 3)
iris.copy_kmeans$centers
# 4. snsdata의 결측값을 적절하게 대체하여 kmeans를 적용해보세요
teens = read.csv('snsdata.csv')
str(teens)
table(teens$gender,useNA = 'ifany')
source('~/.active-rstudio-document', echo=TRUE)
teens$age = ifelse(teens$age >= 13 & teens$age < 20, teens$age, NA)
summary(teens$age)
#결측치 더미 코딩
teens$female = ifelse(teens$gender == 'F' & !is.na(teens$gender), 1, 0)
teens$no_gender = ifelse(is.na(teens$gender),1,0)
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
table(teens$no_gender, useNA = "ifany")
aggregate(data = teens, age ~ gradyear, mean, na.rm = TRUE)
