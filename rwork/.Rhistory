print('hello')
print(
'hello'
)
print('hello')
print(
'hello'
)
?print
#a에 3을 할당
a
#a에 3을 할당
a<-3
a
print(a)
b<-2
b<-2
b
c(1,2,3)
odd<-c(1,3,5)
even<-c(2,4,6)
c(odd,even)
3:9
5:-1
#다양한 증감치를 이용한 수열 생성
seq(from=3,to=9)
seq(from=3,to=9 by=0.5)
seq(from=3,to=9 ,by=0.5)
seq(from=0,to=100 ,length.out=5)
rep(1,times=3)
rep(c(1,2,3),times=5)
#벡터의 각 원소값들을 반복할 때 each사용
rep(c(1,2,3),each=5)
rep(1:3,length.out=8)
#벡터는ㄴ 동일한 데이터 유형으로 표현됨
num<-c(1,2,3) #concatenate
cha<-c('x','y','z')
#벡터는ㄴ 동일한 데이터 유형으로 표현됨
num<-c(1,2,3)
cha<-c('x','y','z')
c(num,cha)
#str:벡터의 유형 및 구조 확인
str(num)
#벡터는ㄴ 동일한 데이터 유형으로 표현됨
n<-c(1,2,3)
cha<-c('x','y','z')
c(n,cha)
#str:벡터의 유형 및 구조 확인
str(n)
#num(numeric):수치
str(cha)
#length:벡터의 길이만 확인
length(n)
LETTERS
letters
month.abb
pi
month<-c(12,9,3,5,1)
month.name
month.name[1]
month.name[2]
month.name[c(1,2)]
month.name(month)
month.name[month]
m<-c(12,9,3,5,1)
month.name[m]
#벡터화(vectorized)연산=>속도가 빠르다
1+2
2^10
10%%3
10%/%3
#벡터 연산은 원소와 원소기리 연산 수행
c(1,2,3)+c(4,5,6)
x<-c(1,2,3)
x*c(4,5,6)
y/c(2,4,5)
y<-c(10,20,30)
y/c(2,4,5)
y%%c(3,5,7)
x<-c(1:3)
x<-c(1:3)
y<-c(4:9)
x+y
#스칼라와도 연산 가능,길이가 다를 때 길이가 짧은 쪽의 요소가 반복되어진다
c(1,3,5)+10
#배수관계가 아니여도 연산결과는 뜨지만 경고메세지 뜸
c(1,2,3)+c(4,5,6,7,8)
10/3
v<-pi
w<-10/3
v==w
v!=w
v>w
!(v>w)
v<w
(v==w)|(v<w)
(v==w)&(v<w)
isTRUE(v==w)
x<-c(1,3,5)
y<-c(3,3,3)
x==y
x==3
#r은 TRUE는 1, FALSE는 0으로 간주
as.numeric(TRUE)
as.numeric(FALSE)
TRUE+TRUE
FALSE+FALSE
x<-c(0,25,50,75,100)
x>50
sum(1:5)
sum(1,2,3)
sum(1:2,3:5)
sum(TRUE,FALSE,TRUE)
sum(x>50)
sum(TRUE,FALSE,TRUE)
any함수:논리값이 하나로도 TRUE이면 결과가 TRUE리턴
a<--3:3
a
a>0
any(a>0)
all(a>0)
sqrt(2)^2==2
sqrt(2)^2==2-2
sqrt(2)^2-2
fruits<-c('Apple','Banana','Strawberry')
food<-c('Pie','Juice','Cake')
fruits+food
#fruits+food 에러
paste(fruits,food)
paste(fruits,'Juice')
x<- -3:3
abs(x)
#로그값: log함수는 리폴트가 밑수가 e인 자연로그
log(1:5)
log(1:5,base=3)
#밑수가 10인 로그함수
log10(1:10)
log2(1:10)
exp(1:5)
log(y)
y<-exp(1:5)
log(y)
factanal(1:5)
factorial(1:5)
sqrt(1:5)
options('digits')
signif(456.789,digits = 2)
signif(456.789,digits = 3)
signif(456.789,digits = 4)
round(456.789,digits =1)
round(456.789,digits = 2)
round(456.789,digits = 3)
sqrt(1:10)
x<-sqrt(1:10)
round(x,digits=3)
round(x,digits=2)
#한줄로
round(sqrt(1:10),digits=2)
round(456.789,digits=1)
round(456.789,digits=-1)
#가까운 짝수로 반올림
round(11.5)
round(12.5)
floor(456.78)
floor(-456.78)
ceiling(456.78)
ceiling(-456.78)
trunc(456.78)
trunc(-456.78)
3/0
5-Inf
Inf*Inf
Inf*(-Inf)
10^306
is.infinite(10^306)
is.infinite(10^307)
is.infinite(10^308)
is.infinite(10^309)
is.infinite(10^(306:310)
is.infinite(10^(306:310))
#NsN(Not a Number:숫자가 아님, 계산 결과를 정의할 수 없다)
Inf/Inf
Inf*0
lod(-2)
log(-2)
NaN+3
is.nan(Inf*0)
#Na(Not Available,결측값)
k<-NA
K+2
#Na(Not Available,결측값)
k<-NA
K+2
k+2
sqrt(NA)
z<-1:5
z
sum(z)
prod(z)
min(z)
max(z)
mean(z)
median(z)
var(z)
sd(z)
range(z)
z
sum(z)
z<-c(z,NA)
z
sum(z)
range(z)
median(z)
sum(z,na.rm = TRUE)
na.omit(z)
sum(na.omit(z))
#cumsum함수: 누적합
traffic.death<-c(10,20,30,20)
cumsum(traffic.death)
#cumsum함수: 누적합
traffic.death<-c(10,20,NA,30,20)
cumsum(traffic.death)
cumsum(na.omit(traffic.death))
diff(traffic.death)
traffic.death<-c(10,20,30,20)
diff(traffic.death)
1:10
diff(1:10)
p<-1:10
q<-6:15
#union(p,q):두 벡터에 대한 합집합
union(p,q)
intersect(p,q)
union(p,q)
setdiff(p,q)
setequal(p,q) #두 집합이 동일한지 확인
#첫번째 인수에 오는 값이 두번째 벡터의 원소인지 테스트:is.element()
is.element(3,1:5)
is.element(6,1:5)
is.element(4:7,1:5)
num<-0:30
num
num[5]
num[5:10]
nump[c(2,5,10,27)]
num[c(2,5,10,27)]
prime<-c(2,3,5,7,11,13)
idx<-c(1,3,5)
prime[idx]
prime[-3]
prine[-2:-4]
prime[2:4]
prime[-(2:4)]
prime<-c(2,3,5,7,11,13)
length(prime)
)
pr
prime[1:length(prime)]
prime[1:(length(prime)-2)]
prime[-length(prime)]
prime[2]<-30
prime[c(3,4)]<-c(30,40)
prime
prime
#1~10
c(1:10)
#10~1
c(10:1)
#1~10~1
c(1:10)
#1~10~1
c(1:10,c(10,1))
#1~10~1
c(1:10,c(10:1))
#1~10~1
c(1:10,c(9:1))
signif(pi,digit=3)
round(pi,digit=3)
round(pi,digit=2)
round(pi,digit=3)
round(pi,digit=2)
signif(pi,digit=3)
round(pi,digit=2)
10%/%3
(weight/height)^2
weight<-c(75, 70, 60, 100, 65)
height<-c(75, 70, 60, 100, 65)
(weight/height)^2
height<-c(180, 160, 165, 185, 155)
(weight/height)^2
weight/(height^2)
weight/height^2
(weight//height)^2
(weight%%height)^2
10%%3
10%/%3
(weight%/%height)^2
weight<-c(75, 70, 60, 100, 65)
height<-c(180, 160, 165, 185, 155)
(weight%/%height)^2
bmi<-w/(h/100)^2
w[bmi>25]
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
n<-1:100
sum(num&&7==0)
sum(n&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
n<-1:100
sum(n&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
num<-1:100
sum(num&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
num<-c(1:100)
sum(num&&7==0)
sum(num%%7==0)
y<-c(1:10)
(y-mean(y)/sd(y))
