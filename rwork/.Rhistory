x>50
sum(1:5)
sum(1,2,3)
sum(1:2,3:5)
sum(TRUE,FALSE,TRUE)
sum(x>50)
sum(TRUE,FALSE,TRUE)
any함수:논리값이 하나로도 TRUE이면 결과가 TRUE리턴
a<--3:3
a
a>0
any(a>0)
all(a>0)
sqrt(2)^2==2
sqrt(2)^2==2-2
sqrt(2)^2-2
fruits<-c('Apple','Banana','Strawberry')
food<-c('Pie','Juice','Cake')
fruits+food
#fruits+food 에러
paste(fruits,food)
paste(fruits,'Juice')
x<- -3:3
abs(x)
#로그값: log함수는 리폴트가 밑수가 e인 자연로그
log(1:5)
log(1:5,base=3)
#밑수가 10인 로그함수
log10(1:10)
log2(1:10)
exp(1:5)
log(y)
y<-exp(1:5)
log(y)
factanal(1:5)
factorial(1:5)
sqrt(1:5)
options('digits')
signif(456.789,digits = 2)
signif(456.789,digits = 3)
signif(456.789,digits = 4)
round(456.789,digits =1)
round(456.789,digits = 2)
round(456.789,digits = 3)
sqrt(1:10)
x<-sqrt(1:10)
round(x,digits=3)
round(x,digits=2)
#한줄로
round(sqrt(1:10),digits=2)
round(456.789,digits=1)
round(456.789,digits=-1)
#가까운 짝수로 반올림
round(11.5)
round(12.5)
floor(456.78)
floor(-456.78)
ceiling(456.78)
ceiling(-456.78)
trunc(456.78)
trunc(-456.78)
3/0
5-Inf
Inf*Inf
Inf*(-Inf)
10^306
is.infinite(10^306)
is.infinite(10^307)
is.infinite(10^308)
is.infinite(10^309)
is.infinite(10^(306:310)
is.infinite(10^(306:310))
#NsN(Not a Number:숫자가 아님, 계산 결과를 정의할 수 없다)
Inf/Inf
Inf*0
lod(-2)
log(-2)
NaN+3
is.nan(Inf*0)
#Na(Not Available,결측값)
k<-NA
K+2
#Na(Not Available,결측값)
k<-NA
K+2
k+2
sqrt(NA)
z<-1:5
z
sum(z)
prod(z)
min(z)
max(z)
mean(z)
median(z)
var(z)
sd(z)
range(z)
z
sum(z)
z<-c(z,NA)
z
sum(z)
range(z)
median(z)
sum(z,na.rm = TRUE)
na.omit(z)
sum(na.omit(z))
#cumsum함수: 누적합
traffic.death<-c(10,20,30,20)
cumsum(traffic.death)
#cumsum함수: 누적합
traffic.death<-c(10,20,NA,30,20)
cumsum(traffic.death)
cumsum(na.omit(traffic.death))
diff(traffic.death)
traffic.death<-c(10,20,30,20)
diff(traffic.death)
1:10
diff(1:10)
p<-1:10
q<-6:15
#union(p,q):두 벡터에 대한 합집합
union(p,q)
intersect(p,q)
union(p,q)
setdiff(p,q)
setequal(p,q) #두 집합이 동일한지 확인
#첫번째 인수에 오는 값이 두번째 벡터의 원소인지 테스트:is.element()
is.element(3,1:5)
is.element(6,1:5)
is.element(4:7,1:5)
num<-0:30
num
num[5]
num[5:10]
nump[c(2,5,10,27)]
num[c(2,5,10,27)]
prime<-c(2,3,5,7,11,13)
idx<-c(1,3,5)
prime[idx]
prime[-3]
prine[-2:-4]
prime[2:4]
prime[-(2:4)]
prime<-c(2,3,5,7,11,13)
length(prime)
)
pr
prime[1:length(prime)]
prime[1:(length(prime)-2)]
prime[-length(prime)]
prime[2]<-30
prime[c(3,4)]<-c(30,40)
prime
prime
#1~10
c(1:10)
#10~1
c(10:1)
#1~10~1
c(1:10)
#1~10~1
c(1:10,c(10,1))
#1~10~1
c(1:10,c(10:1))
#1~10~1
c(1:10,c(9:1))
signif(pi,digit=3)
round(pi,digit=3)
round(pi,digit=2)
round(pi,digit=3)
round(pi,digit=2)
signif(pi,digit=3)
round(pi,digit=2)
10%/%3
(weight/height)^2
weight<-c(75, 70, 60, 100, 65)
height<-c(75, 70, 60, 100, 65)
(weight/height)^2
height<-c(180, 160, 165, 185, 155)
(weight/height)^2
weight/(height^2)
weight/height^2
(weight//height)^2
(weight%%height)^2
10%%3
10%/%3
(weight%/%height)^2
weight<-c(75, 70, 60, 100, 65)
height<-c(180, 160, 165, 185, 155)
(weight%/%height)^2
bmi<-w/(h/100)^2
w[bmi>25]
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
n<-1:100
sum(num&&7==0)
sum(n&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
n<-1:100
sum(n&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
num<-1:100
sum(num&&7==0)
#sum함수와 논리연산을 이용하여 1~100까지 정수 가운데 7의 배수인 정수 개수를 구하시오.
num<-c(1:100)
sum(num&&7==0)
sum(num%%7==0)
y<-c(1:10)
(y-mean(y)/sd(y))
#finance.yahoo.com->samsung
df<-read.csv("samsung.csv",header=TRUE,sep=",")
df
df2<-read.csv("samsung.csv")  #,header=TRUE,sep="," 디폴트
df2
read.csv('samsung.csv',header=FALSE,sep=',')
# 1. Happy, Birthday, to, you로 구성된 텍스트 벡터 생성하시오
# -벡터의 길이
# -문자 개수의 합
x<-c('Happy', 'Birthday', 'to, you')
length(x)
# 1. Happy, Birthday, to, you로 구성된 텍스트 벡터 생성하시오
# -벡터의 길이
# -문자 개수의 합
x<-c('Happy', 'Birthday', 'to', 'you')
length(x)
x<-'We have a dream'
#nchar함수(텍스트 안에 문자의 개수 , 공백문자도 하나의 문자로 취급)
nchar(x)
length(x) #문자 벡터의 벡터 길이(문자열자체를 하나로 봄(원소 개수 1개))
length(c('we','have','a','dream'))  #백터 길이4
y<-c('we','have','a','dream')
length(y[4])
nchar(y[4])
nchar(y)
# -문자 개수의 합
nchar[x]
# -문자 개수의 합
nchar(x)
nchar(y)
x<-c('Happy', 'Birthday', 'to', 'you')
# -벡터의 길이
length(x)
# -문자 개수의 합
nchar(x)
# -문자 개수의 합
sum(nchar(x))
# 2. 1번 문제 벡터를 모두 연결하시오("Happy Birthday to you")
paste(c,collapse = " ")
# 2. 1번 문제 벡터를 모두 연결하시오("Happy Birthday to you")
paste(x,collapse = " ")
# 2. 1번 문제 벡터를 모두 연결하시오("Happy Birthday to you")
text<-paste(x,collapse = " ")
# - 텍스트 벡터의 길이
length(text)
# - 텍스트 벡터의 길이
nchar(text)
# 3. paste함수와 LETTERS 상수 벡터를 이용하여 다음 문자 벡터 생성하시오
# - "A 1" "B 2" "C 3" "D 4" "E 5"
# -"A1" "B2" "C3" "D4" "E5"
al<-c('A','B','C','D','E')
nu<-c(1,2,3,4,5)
paste(al,nu)
# 3. paste함수와 LETTERS 상수 벡터를 이용하여 다음 문자 벡터 생성하시오
# - "A 1" "B 2" "C 3" "D 4" "E 5"
# -"A1" "B2" "C3" "D4" "E5"
al<-c('A','B','C','D','E')
paste(al,LETTERS)
paste(1:5,LETTERS)
paste(LETTERS,1:5)
paste(LETTERS[1:5],1:5)
paste(LETTERS[1:5],1:5,sep = '')
# 4. 단어 단위로 분할하고, 모든 쉼표와 하이픈은 제거하시오.
x<-c("Yesterday is history,", "That's, why we call it the present - from Kung")
strsplit(x,split="")
# 4. 단어 단위로 분할하고, 모든 쉼표와 하이픈은 제거하시오.
x<-c("Yesterday is history,", "That's, why we call it the present - from Kung")
strsplit(x,split="")
strsplit(x,split=",")
strsplit(x,split=" ")
x<-gsub(pattern = ',',replacement = '',txt)
x<-gsub(pattern = ',',replacement = '',x)
x<-gsub(pattern = '-',replacement = '',txt)
x
x<-gsub(pattern = '-',replacement = '',t)
x
x<-gsub(pattern = '-',replacement = '',x)
x
ltxt<-strsplit(txt,' ')
ltxt
ltxt<-strsplit(x,' ')
ltxt
ltxt[[2]]
ltxt[[2]]
ltxt[[1]]
ltxt[[2]]
# 5. 주민번호 뒤 일곱 자리 수를 *로 모두 대체하시오(?)
# "110101-1234123" "950102-2121212"
id<-c("110101-1234123" "950102-2121212")
# 5. 주민번호 뒤 일곱 자리 수를 *로 모두 대체하시오(?)
# "110101-1234123" "950102-2121212"
id<-c("110101-1234123","950102-2121212")
idnum
id
pat<-substr(id,nchar(id)-6,nchar(id))
pat
gsub(pattern = pat[1],replacement = '*******',id)
gsub(pattern = pat[2],replacement = '*******',id)
id<-matrix(c("110101-1234123","950102-2121212"))
id
num<-paste(1:12)
num
month.abb
paste(month.abb,num,sep = "_")
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
names(df)
str(df)
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
df[name(df)]
df[name(df)[2]]
df[names(df)[2]]
names(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1])
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[,-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[,-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[1],2,scale)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
df[names(df)[7]]
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
names(df)
laf<-rbind(df[2:249,3:4],0)
laf<-rbind(df[2:249,3:4])
lag<-rbind(df[2:249,3:4])
lag
df<-df[,3:4]
lag
df
lag<-rbind(df[2:249,3:4],)
df<-df[,3:4]
lag<-rbind(df[2:249,3:4],0)
lag<-rbind(df[2:249,3:4],0)
lag
df
lag<-rbind(df[2:249,3:4])
head(df)
head(lag)
head(df)
head(lag)
df
head(df)
head(df)
head(lag)
fall<-lag-df
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-lag-df
max(x[1:nrow(samsung)-1]-x[2:nrow(samsung)])})
apply(samsung[,3:4], 2, function(x){max(x[1:nrow(samsung)-1]-x[2:nrow(samsung)])})
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
apply(df[3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
lag<-rbind(df[2:249,3:4],0)
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-lag-df
apply(fall,2,max)
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
apply(df[,3:4], 2, function(x){max(x[1:nrow(df)-1]-x[2:nrow(df)])})
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-lag-df
apply(fall,2,max)
# 7. read.csv(file="samsung.csv")
# 1) Open, High, Low, Close, Adj.Close, Volume 열을 추출
df<-read.csv(file="samsung.csv")
df
head(df)
names(df)
str(df)
df[names(df)[2]]
df[names(df)[3]]
df[names(df)[4]]
df[names(df)[5]]
df[names(df)[6]]
df[names(df)[7]]
# 2) 각 열에 대해 최소값, 최대값, 평균, 표준편차 출력
apply(df[-1],2,min,na.rm=T)
apply(df[-1],2,max,na.rm=T)
apply(df[-1],2,mean,na.rm=T)
apply(df[-1],2,sd,na.rm=T)
# 3) 각 열에 대해 정규화 / 표준화
apply(df[-1],2,scale)
apply(df[-1],2,function(x){
(x-min(x,na.rm = T))/(max(x,na.rm = T))-min(x,na.rm = T)
})
lag<-rbind(df[2:249,3:4],0)
df<-df[,3:4]
head(df)
head(lag)
fall<-df-lag
apply(fall,2,max)
fall<-lag-df
apply(fall,2,max)
